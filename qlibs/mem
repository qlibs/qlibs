// <!--
// The MIT License (MIT)
//
// Copyright (c) 2024 Kris Jusiak <kris@jusiak.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#if 0
// -->
[![MIT Licence](http://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/license/mit)
[![Version](https://badge.fury.io/gh/qlibs%2Fmem.svg)](https://github.com/qlibs/mem/releases)
[![build](https://img.shields.io/badge/build-blue.svg)](https://godbolt.org/z/ensvKohTs)
[![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](https://godbolt.org/z/cqch69rGh)

---------------------------------------

## mem: Memory Allocators

> [https://en.wikipedia.org/wiki/Allocator_C++](https://en.wikipedia.org/wiki/Allocator_(C%2B%2B))

### Features

- Single header (https://raw.githubusercontent.com/qlibs/mem/main/mem - for integration see [FAQ](#faq))
- Minimal [API](#api)
- Verifies itself upon include (can be disabled with `-DNTEST` - see [FAQ](#faq))

### Requirements

- C++20 ([clang++12+, g++11+](https://en.cppreference.com/w/cpp/compiler_support)) / [Linux](https://en.wikipedia.org/wiki/Linux)

---

### Overview

```cpp
static_assert(mem::allocator<std::allocator<int>>);
static_assert(mem::allocator<mem::stack_allocator<int, 1024u>>);
static_assert(mem::allocator<mem::huge_page_allocator<int>>);
static_assert(mem::allocator<mem::numa_allocator<int>>);
```

```cpp
std::vector<int, mem::stack_allocator<int, 1024u>> v{};
```

```cpp
// echo 20 > /proc/sys/vm/nr_hugepages
std::vector<int, mem::huge_page_allocator<int>> v{};
```

```cpp
// -lnuma (requires libnuma-dev)
std::vector<int, mem::numa_allocator<int>> v{};
```

---

### API

```cpp
template<class TAllocator>
concept allocator = requires(TAllocator alloc,
                             typename TAllocator::value_type* ptr,
                             std::size_t n) {
  typename TAllocator::value_type;
  { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
  { alloc.deallocate(ptr, n) } -> std::same_as<void>;
  #if __cpp_lib_allocate_at_least >= 202302L
  { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
  #endif
};

template<class T,
         std::size_t N,
         std::size_t alignment = alignof(T),
         auto on_error = [] { return nullptr; }>
  requires (alignment <= alignof(std::max_align_t)) and (not (N % alignment))
struct stack_allocator {
  using value_type = T;

  constexpr stack_allocator() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept;
};

template <class T,
          std::size_t N = (1u << 21u),
          auto on_error = [] { return nullptr; }>
struct huge_page_allocator {
  using value_type = T;

  constexpr huge_page_allocator() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T *ptr, std::size_t n) noexcept;
};

template<class T, auto on_error = [] { return nullptr; }>
struct numa_allocator {
  using value_type = T;

  constexpr numa_allocator(node_type node = {}) noexcept;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept;
};
```

---

### FAQ

- How to integrate with CMake/CPM?

    ```
    CPMAddPackage(
      Name mem
      GITHUB_REPOSITORY qlibs/mem
      GIT_TAG v1.0.0
    )
    add_library(mp INTERFACE)
    target_include_directories(mp SYSTEM INTERFACE ${mp_SOURCE_DIR})
    add_library(mem::mem ALIAS mem)
    ```

    ```
    target_link_libraries(${PROJECT_NAME} mem::mem)
    ```

- Acknowledgments

  > - https://eel.is/c++draft/allocator.requirements
  > - https://en.cppreference.com/w/cpp/memory/allocator

  > - https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
  > - https://www.man7.org/linux/man-pages/man2/mmap.2.html
  > - https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
  > - https://github.com/libhugetlbfs/libhugetlbfs
  > - https://wiki.debian.org/Hugepages

  > - https://en.wikipedia.org/wiki/Non-uniform_memory_access
  > - https://man7.org/linux/man-pages/man3/numa.3.html
  > - https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html

<!--
#endif

#pragma once

#include <memory>
#include <cassert>
#include <array>
#include <bitset>
#include <bit>
#include <concepts>
#include <numeric>
#include <cstdint>
#include <cstddef>

namespace mem::inline v1_0_0 {
template<class TAllocator>
concept allocator = requires(TAllocator alloc, typename TAllocator::value_type* ptr, std::size_t n) {
  typename TAllocator::value_type;
  { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
  { alloc.deallocate(ptr, n) } -> std::same_as<void>;
  #if __cpp_lib_allocate_at_least >= 202302L
  { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
  #endif
};
} // mem

namespace mem::inline v1_0_0 {
template<class T, std::size_t N, std::size_t alignment = alignof(T), auto on_error = [] { return nullptr; }>
  requires (alignment <= alignof(std::max_align_t)) and (not (N % alignment))
struct stack_allocator {
  using value_type = T;
  using stack_type = std::byte;
  template<class U> struct rebind {
    using other = stack_allocator<U, N, alignment, on_error>;
  };
  static constexpr auto align = [](std::size_t n) { return (n + (alignment - 1u)) & ~(alignment - 1u); };

  constexpr stack_allocator() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    const auto aligned = align(n * sizeof(T));
    if (std::size_t(data.data() + N - sp) < align(n * sizeof(T))) [[unlikely]] {
      return on_error();
    }
    auto ptr = std::bit_cast<T*>(sp);
    sp += aligned;
    return ptr;
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), align(n * sizeof(T)) / sizeof(T) };
  }
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept {
    const auto aligned = align(n * sizeof(T));
    auto p = std::bit_cast<stack_type*>(ptr);
    if (p + aligned != sp) [[unlikely]] {
      return;
    }
    sp = p;
  }

  alignas(alignment) std::array<stack_type, N> data{};
  stack_type* sp{data.data()};
};
} // namespace mem

#if __has_include(<sys/mman.h>)
#include <sys/mman.h>
namespace mem::inline v1_0_0 {
/**
 * `echo 20 > /proc/sys/vm/nr_hugepages`
 * https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
 * https://www.man7.org/linux/man-pages/man2/mmap.2.html
 * https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
 * https://github.com/libhugetlbfs/libhugetlbfs
 * https://wiki.debian.org/Hugepages
 */
template <class T, std::size_t N = (1u << 21u), auto on_error = [] { return nullptr; }>
struct huge_page_allocator {
  using value_type = T;
  template<class U> struct rebind {
    using other = huge_page_allocator<U, N, on_error>;
  };

  static constexpr auto size = N;
  static constexpr auto prot = PROT_READ | PROT_WRITE;
  static constexpr auto flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE | MAP_HUGETLB;
  static constexpr auto round = [](std::size_t n) { return (((n - 1u) / N) + 1u) * N; };

  constexpr huge_page_allocator() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    if (n > std::numeric_limits<std::size_t>::max() / sizeof(T)) [[unlikely]] {
      return on_error();
    }
    auto ptr = std::bit_cast<T*>(mmap(nullptr, round(n * sizeof(T)), prot, flags, -1, 0));
    if (ptr == MAP_FAILED) [[unlikely]] {
      return on_error();
    }
    return ptr;
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), round(n * sizeof(T)) / sizeof(T) };
  }
  #endif

  constexpr void deallocate(T *ptr, std::size_t n) noexcept {
    munmap(ptr, round(n));
  }
};
#endif
} // mem

#if __has_include(<numa.h>)
#include <numa.h>
namespace mem::inline v1_0_0 {
/**
 * `-lnuma`
 * https://en.wikipedia.org/wiki/Non-uniform_memory_access
 * https://man7.org/linux/man-pages/man3/numa.3.html
 * https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html
 */
template<class T, auto on_error = [] { return nullptr; }>
struct numa_allocator {
  using value_type = T;
  using node_type = int;
  template<class U> struct rebind {
    using other = numa_allocator<U, on_error>;
  };

  constexpr numa_allocator(node_type node = {}) noexcept : node{node} { }

  /**
   * The size argument (n) will be rounded up to a multiple of the system page size.
   */
  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    auto ptr = numa_alloc_onnode(n * sizeof(T), node);
    if (not ptr) [[unlikely]] {
      return on_error();
    }
    return std::bit_cast<T*>(ptr);
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), n };
  }
  #endif

  /**
   * The size argument (n) will be rounded up to a multiple of the system page size.
   */
  constexpr void deallocate(T* ptr, std::size_t n) noexcept {
    numa_free(ptr, n * sizeof(T));
  }

  node_type node{};
};
} // mem
#endif

#ifndef NTEST
static_assert(([] {
  // mem::allocator
  {
    static_assert(not mem::allocator<void>);
    static_assert(not mem::allocator<int>);
    static_assert(mem::allocator<std::allocator<int>>);
    static_assert(mem::allocator<mem::stack_allocator<int, 1024u>>);
    #if __has_include(<sys/mman.h>)
    static_assert(mem::allocator<mem::huge_page_allocator<int>>);
    #endif
    #if __has_include(<numa.h>)
    static_assert(mem::allocator<mem::numa_allocator<int>>);
    #endif
  }

  // mem::stack_allocator
  {
    static_assert(not []<class T, auto... Vs> { return requires { mem::stack_allocator<T, Vs...>{}; }; }.template operator()<int, 1u>());
    static_assert(not []<class T, auto... Vs> { return requires { mem::stack_allocator<T, Vs...>{}; }; }.template operator()<int, 2u>());
    static_assert(not []<class T, auto... Vs> { return requires { mem::stack_allocator<T, Vs...>{}; }; }.template operator()<int, sizeof(int), 1u + alignof(std::max_align_t)>());
    static_assert([]<class T, auto... Vs> { return requires { mem::stack_allocator<T, Vs...>{}; }; }.template operator()<int, sizeof(int) * 8u>());
    static_assert([]<class T, auto... Vs> { return requires { mem::stack_allocator<T, Vs...>{}; }; }.template  operator()<int, alignof(int)>());
    static_assert(sizeof(mem::stack_allocator<int, 16u>) >= sizeof(std::array<std::byte, 16u>));
  }

  #if __has_include(<sys/mman.h>)
  // mem::huge_page_allocator
  {
    struct empty { };
    static_assert([]<class T, auto... Vs> { return requires { mem::huge_page_allocator<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::huge_page_allocator<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(empty) == sizeof(mem::huge_page_allocator<int>));
    mem::huge_page_allocator<int> allocator{};
    static_assert(1u << 21u == allocator.size);
  }
  #endif

  #if __has_include(<numa.h>)
  // mem::numa_allocator
  {
    static_assert([]<class T, auto... Vs> { return requires { mem::numa_allocator<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::numa_allocator<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(mem::numa_allocator<int>::node_type) == sizeof(mem::numa_allocator<int>));
  }
  #endif
}(), true));
#endif // NTEST
